dumping graph to: lancet.graalgen.Impl$$anon$9
2
GraalOptions.Dump         = null
GraalOptions.MethodFilter = null
To debug use:
Scope LMS
Method HotSpotMethod<Impl$$anon$9$$anonfun$1.apply$mcII$sp>
===== AFTER_PARSING
0|StartNode(3)
1|Local(0)()
2|Local(1)()
3|FrameState@0(2)
4|Const(Console$@1575256841)()
5|MethodCallTarget(4,2)
6|Invoke#println(7,5)
7|FrameState@7()
10|Return()
----- AFTER_PARSING method calls 
  invoke: 6|Invoke#println
    trgt: HotSpotMethod<Console$.println>
    args: [4|Const(Console$@1575256841), 2|Local(1)]
    info: exact scala.Console$.println(Object):void
===== AFTER_PARSING
0|StartNode(3)
1|Local(0)()
2|Local(1)()
3|FrameState@0(1,2)
4|MethodCallTarget(1)
5|Invoke#out(6,4)
6|FrameState@4(2,5)
8|MethodCallTarget(5,2)
9|Invoke#println(10,8)
10|FrameState@8()
13|Return()
----- AFTER_PARSING method calls 
  invoke: 5|Invoke#out
    trgt: HotSpotMethod<Console$.out>
    args: [1|Local(0)]
    info: exact scala.Console$.out():PrintStream
  invoke: 9|Invoke#println
    trgt: HotSpotMethod<PrintStream.println>
    args: [5|Invoke#out, 2|Local(1)]
    info: assumption java.io.PrintStream.println(Object):void
===== AFTER_PARSING
0|StartNode(2)
1|Local(0)()
2|FrameState@0(1)
3|MethodCallTarget(1)
4|Invoke#outVar(5,3)
5|FrameState@4(4)
7|MethodCallTarget(4)
8|Invoke#value(9,7)
9|FrameState@7(8)
11|CheckCast(8)
13|Return(11)
----- AFTER_PARSING method calls 
  invoke: 4|Invoke#outVar
    trgt: HotSpotMethod<Console$.outVar>
    args: [1|Local(0)]
    info: exact scala.Console$.outVar():DynamicVariable
  invoke: 8|Invoke#value
    trgt: HotSpotMethod<DynamicVariable.value>
    args: [4|Invoke#outVar]
    info: assumption scala.util.DynamicVariable.value():Object
===== AFTER_PARSING
0|StartNode(2)
1|Local(0)()
2|FrameState@0(1)
3|LoadField#outVar(1)
5|Return(3)
----- AFTER_PARSING method calls 
===== AFTER_PARSING
0|StartNode(2)
1|Local(0)()
2|FrameState@0(1)
3|MethodCallTarget(1)
4|Invoke#tl(5,3)
5|FrameState@4(4)
7|MethodCallTarget(4)
8|Invoke#get(9,7)
9|FrameState@7(8)
12|Return(8)
----- AFTER_PARSING method calls 
  invoke: 4|Invoke#tl
    trgt: HotSpotMethod<DynamicVariable.tl>
    args: [1|Local(0)]
    info: exact scala.util.DynamicVariable.tl():InheritableThreadLocal
  invoke: 8|Invoke#get
    trgt: HotSpotMethod<ThreadLocal.get>
    args: [4|Invoke#tl]
    info: assumption java.lang.ThreadLocal.get():Object
===== AFTER_PARSING
0|StartNode(2)
1|Local(0)()
2|FrameState@0(1)
3|LoadField#tl(1)
5|Return(3)
----- AFTER_PARSING method calls 
===== AFTER_PARSING
0|StartNode(2)
1|Local(0)()
2|FrameState@0(1)
3|MethodCallTarget()
4|DispatchBegin(5)
5|FrameState@0(1)
6|ExceptionObject(7)
7|FrameState@0(1,6)
9|Invoke#currentThread(3,12)
11|Begin()
12|FrameState@3(1,9)
13|MethodCallTarget(1,9)
14|Invoke#getMap(15,13)
15|FrameState@9(1,14)
17|Const(null)()
18|==(14,17)
20|Begin()
22|Begin()
23|If(18)
24|MethodCallTarget(14,1)
25|Invoke#access$000(26,24)
26|FrameState@19(1,25)
28|==(25,17)
29|EndNode()
30|Merge(38,29,31)
31|EndNode()
32|Begin()
34|Begin()
35|If(28)
36|LoadField#value(25)
38|FrameState@29(1)
39|MethodCallTarget(1)
40|Invoke#setInitialValue(41,39)
41|FrameState@33(40)
43|EndNode()
44|Merge(47,43,45)
45|EndNode()
46|Phi(36 40)(44,36,40)
47|FrameState@28(46)
48|Return(46)
49|Unwind(6)
----- AFTER_PARSING method calls 
  invoke: 14|Invoke#getMap
    trgt: HotSpotMethod<ThreadLocal.getMap>
    args: [1|Local(0), 9|Invoke#currentThread]
    info: polymorphic, 2 methods [   java.lang.ThreadLocal.getMap(Thread):ThreadLocal$ThreadLocalMap  java.lang.InheritableThreadLocal.getMap(Thread):ThreadLocal$ThreadLocalMap ], 8 type checks [   Ljava/lang/ThreadLocal;0.9713985552587947  Lscala/util/DynamicVariable$$anon$1;0.014331764585580343  Lcom/oracle/graal/hotspot/CompilationTask$1;0.011366320048888445  Lsbinary/JavaUTF$$anon$1;0.002575895172266033  Lsun/misc/FloatingDecimal$1;2.872926562640755E-4  Lsun/nio/ch/Util$1;2.434683527661657E-5  Ljava/lang/InheritableThreadLocal;1.3390759402139112E-5  Lcom/oracle/graal/debug/TTY$1;2.434683527661657E-6 ]
  invoke: 25|Invoke#access$000
    trgt: HotSpotMethod<ThreadLocal$ThreadLocalMap.access$000>
    args: [14|Invoke#getMap, 1|Local(0)]
    info: exact java.lang.ThreadLocal$ThreadLocalMap.access$000(ThreadLocal$ThreadLocalMap, ThreadLocal):ThreadLocal$ThreadLocalMap$Entry
  invoke: 40|Invoke#setInitialValue
    trgt: HotSpotMethod<ThreadLocal.setInitialValue>
    args: [1|Local(0)]
    info: exact java.lang.ThreadLocal.setInitialValue():Object
===== AFTER_PARSING
0|StartNode(3)
1|Local(0)()
2|Local(1)()
3|FrameState@0(2)
4|LoadField#inheritableThreadLocals(2)
6|Return(4)
----- AFTER_PARSING method calls 
===== AFTER_PARSING
0|StartNode(3)
1|Local(0)()
2|Local(1)()
3|FrameState@0(1,2)
4|MethodCallTarget(1,2)
5|Invoke#getEntry(6,4)
6|FrameState@5(5)
9|Return(5)
----- AFTER_PARSING method calls 
  invoke: 5|Invoke#getEntry
    trgt: HotSpotMethod<ThreadLocal$ThreadLocalMap.getEntry>
    args: [1|Local(0), 2|Local(1)]
    info: exact java.lang.ThreadLocal$ThreadLocalMap.getEntry(ThreadLocal):ThreadLocal$ThreadLocalMap$Entry
===== AFTER_PARSING
0|StartNode(3)
1|Local(0)()
2|Local(1)()
3|FrameState@0(1,2)
4|MethodCallTarget(2)
5|Invoke#access$400(6,4)
6|FrameState@4(1,2,5)
8|LoadField#table(1)
9|ArrayLength(8)
10|Const(1)()
11|-(9,10)
12|&(5,11)
13|LoadField#table(1)
14|LoadIndexed(13,12)
15|Const(null)()
16|==(14,15)
18|Begin()
20|Begin()
21|If(16)
22|MethodCallTarget(14)
23|Invoke#get(24,22)
24|FrameState@28(1,2,12,14,23)
26|==(23,2)
27|EndNode()
28|Merge(35,27,29)
29|EndNode()
30|Begin()
32|Begin()
33|If(26)
35|FrameState@34(1,2,12,14)
36|MethodCallTarget(1,2,12,14)
37|Invoke#getEntryAfterMiss(38,36)
38|FrameState@41(37)
40|EndNode()
41|Merge(44,40,42)
42|EndNode()
43|Phi(14 37)(41,14,37)
44|FrameState@33(43)
45|Return(43)
----- AFTER_PARSING method calls 
  invoke: 5|Invoke#access$400
    trgt: HotSpotMethod<ThreadLocal.access$400>
    args: [2|Local(1)]
    info: exact java.lang.ThreadLocal.access$400(ThreadLocal):int
  invoke: 23|Invoke#get
    trgt: HotSpotMethod<Reference.get>
    args: [14|LoadIndexed]
    info: assumption java.lang.ref.Reference.get():Object
  invoke: 37|Invoke#getEntryAfterMiss
    trgt: HotSpotMethod<ThreadLocal$ThreadLocalMap.getEntryAfterMiss>
    args: [1|Local(0), 2|Local(1), 12|&, 14|LoadIndexed]
    info: exact java.lang.ThreadLocal$ThreadLocalMap.getEntryAfterMiss(ThreadLocal, int, ThreadLocal$ThreadLocalMap$Entry):ThreadLocal$ThreadLocalMap$Entry
===== AFTER_PARSING
0|StartNode(2)
1|Local(0)()
2|FrameState@0(1)
3|LoadField#threadLocalHashCode(1)
5|Return(3)
----- AFTER_PARSING method calls 
===== AFTER_PARSING
0|StartNode(3)
1|Local(0)()
2|Local(1)()
3|FrameState@0(1,2)
4|MethodCallTarget(2)
5|Invoke#valueOf(6,4)
6|FrameState@4(1,5)
8|MonitorEnter(9,1)
9|FrameState@9(1,5,1,1)
10|MethodCallTarget(1,5)
11|Invoke#print(12,10)
12|FrameState@14(1,1,1)
14|MethodCallTarget(1)
15|Invoke#newLine(16,14)
16|FrameState@18(1,1)
18|MonitorExit(19,1)
19|FrameState@20(1)
22|Return()
----- AFTER_PARSING method calls 
  invoke: 5|Invoke#valueOf
    trgt: HotSpotMethod<String.valueOf>
    args: [2|Local(1)]
    info: exact java.lang.String.valueOf(Object):String
  invoke: 11|Invoke#print
    trgt: HotSpotMethod<PrintStream.print>
    args: [1|Local(0), 5|Invoke#valueOf]
    info: assumption java.io.PrintStream.print(String):void
  invoke: 15|Invoke#newLine
    trgt: HotSpotMethod<PrintStream.newLine>
    args: [1|Local(0)]
    info: exact java.io.PrintStream.newLine():void
===== AFTER_PARSING
0|StartNode(3)
1|Local(0)()
2|Local(1)()
3|FrameState@0(1,2)
4|Const(null)()
5|==(2,4)
7|Begin()
8|Deopt()
9|Begin()
10|If(5)
11|MethodCallTarget(1,2)
12|Invoke#write(13,11)
13|FrameState@12()
16|Return()
----- AFTER_PARSING method calls 
  invoke: 12|Invoke#write
    trgt: HotSpotMethod<PrintStream.write>
    args: [1|Local(0), 2|Local(1)]
    info: exact java.io.PrintStream.write(String):void
===== AFTER_PARSING
0|StartNode(3)
1|Local(0)()
2|Local(1)()
3|FrameState@0(1,2)
4|MonitorEnter(5,1)
5|FrameState@4(1,2,1,1)
6|MethodCallTarget(1)
7|Invoke#ensureOpen(8,6)
8|FrameState@8(1,2,1,1)
10|LoadField#textOut(1)
12|MethodCallTarget(10,2)
13|Invoke#write(14,12)
14|FrameState@16(1,2,1,1)
16|LoadField#textOut(1)
18|MethodCallTarget(16)
19|Invoke#flushBuffer(20,18)
20|FrameState@23(1,2,1,1)
22|LoadField#charOut(1)
24|MethodCallTarget(22)
25|Invoke#flushBuffer(26,24)
26|FrameState@30(1,2,1,1)
28|LoadField#autoFlush(1)
30|Const(0)()
31|==(28,30)
33|Begin()
35|Begin()
36|If(31)
37|Const(10)()
38|MethodCallTarget(2,37)
39|Invoke#indexOf(40,38)
40|FrameState@43(1,1,39,1)
42|<(39,30)
43|EndNode()
44|Merge(50,43,45)
45|EndNode()
46|Begin()
47|Deopt()
48|Begin()
49|If(42)
50|FrameState@53(1,1)
51|MonitorExit(52,1)
52|FrameState@55(1)
56|Return()
----- AFTER_PARSING method calls 
  invoke: 7|Invoke#ensureOpen
    trgt: HotSpotMethod<PrintStream.ensureOpen>
    args: [1|Local(0)]
    info: exact java.io.PrintStream.ensureOpen():void
  invoke: 13|Invoke#write
    trgt: HotSpotMethod<Writer.write>
    args: [10|LoadField#textOut, 2|Local(1)]
    info: assumption java.io.Writer.write(String):void
  invoke: 19|Invoke#flushBuffer
    trgt: HotSpotMethod<BufferedWriter.flushBuffer>
    args: [16|LoadField#textOut]
    info: assumption java.io.BufferedWriter.flushBuffer():void
  invoke: 25|Invoke#flushBuffer
    trgt: HotSpotMethod<OutputStreamWriter.flushBuffer>
    args: [22|LoadField#charOut]
    info: assumption java.io.OutputStreamWriter.flushBuffer():void
  invoke: 39|Invoke#indexOf
    trgt: HotSpotMethod<String.indexOf>
    args: [2|Local(1), 37|Const(10)]
    info: exact java.lang.String.indexOf(int):int
===== AFTER_PARSING
0|StartNode(2)
1|Local(0)()
2|FrameState@0(1)
3|LoadField#out(1)
4|Const(null)()
5|==(3,4)
7|Begin()
8|Deopt()
9|Begin()
10|If(5)
12|Return()
----- AFTER_PARSING method calls 
===== AFTER_PARSING
0|StartNode(3)
1|Local(0)()
2|Local(1)()
3|FrameState@0(1,2)
4|Const(0)()
5|MethodCallTarget(2)
6|Invoke#length(7,5)
7|FrameState@7(1,2,4,6)
9|MethodCallTarget(1,2,4,6)
10|Invoke#write(11,9)
11|FrameState@10()
14|Return()
----- AFTER_PARSING method calls 
  invoke: 6|Invoke#length
    trgt: HotSpotMethod<String.length>
    args: [2|Local(1)]
    info: exact java.lang.String.length():int
  invoke: 10|Invoke#write
    trgt: HotSpotMethod<Writer.write>
    args: [1|Local(0), 2|Local(1), 4|Const(0), 6|Invoke#length]
    info: type-checked with type Ljava/io/BufferedWriter; and method java.io.BufferedWriter.write(String, int, int):void
===== AFTER_PARSING
0|StartNode(2)
1|Local(0)()
2|FrameState@0(1)
3|LoadField#lock(1)
4|MonitorEnter(5,3)
5|FrameState@7(1,3,3)
6|MethodCallTarget(1)
7|Invoke#ensureOpen(8,6)
8|FrameState@11(1,3,3)
10|LoadField#nextChar(1)
12|Const(0)()
13|==(10,12)
15|Begin()
17|Begin()
18|If(13)
19|MonitorExit(20,3)
20|FrameState@20(3)
22|LoadField#out(1)
24|LoadField#cb(1)
26|LoadField#nextChar(1)
28|MethodCallTarget(22,24,12,26)
29|Invoke#write(30,28)
30|FrameState@37(1,3,3)
32|StoreField#nextChar(1,12,33)
33|FrameState@42(3,3)
35|MonitorExit(36,3)
36|FrameState@44(3)
38|EndNode()
39|Merge(41,38,40)
40|EndNode()
41|FrameState@20()
42|Return()
----- AFTER_PARSING method calls 
  invoke: 7|Invoke#ensureOpen
    trgt: HotSpotMethod<BufferedWriter.ensureOpen>
    args: [1|Local(0)]
    info: exact java.io.BufferedWriter.ensureOpen():void
  invoke: 29|Invoke#write
    trgt: HotSpotMethod<Writer.write>
    args: [22|LoadField#out, 24|LoadField#cb, 12|Const(0), 26|LoadField#nextChar]
    info: type-checked with type Ljava/io/OutputStreamWriter; and method java.io.OutputStreamWriter.write(char[], int, int):void
===== AFTER_PARSING
0|StartNode(2)
1|Local(0)()
2|FrameState@0(1)
3|LoadField#out(1)
4|Const(null)()
5|==(3,4)
7|Begin()
8|Deopt()
9|Begin()
10|If(5)
12|Return()
----- AFTER_PARSING method calls 
===== AFTER_PARSING
0|StartNode(5)
1|Local(0)()
2|Local(1)()
3|Local(2)()
4|Local(3)()
5|FrameState@0(1,2,3,4)
6|LoadField#se(1)
7|MethodCallTarget(6,2,3,4)
8|Invoke#write(9,7)
9|FrameState@10()
12|Return()
----- AFTER_PARSING method calls 
  invoke: 8|Invoke#write
    trgt: HotSpotMethod<StreamEncoder.write>
    args: [6|LoadField#se, 2|Local(1), 3|Local(2), 4|Local(3)]
    info: assumption sun.nio.cs.StreamEncoder.write(char[], int, int):void
===== AFTER_PARSING
0|StartNode(5)
1|Local(0)()
2|Local(1)()
3|Local(2)()
4|Local(3)()
5|FrameState@0(1,2,3,4)
6|LoadField#lock(1)
7|MonitorEnter(8,6)
8|FrameState@8(1,2,3,4,6,6)
9|MethodCallTarget(1)
10|Invoke#ensureOpen(11,9)
11|FrameState@12(1,2,3,4,6,6)
13|Const(0)()
14|<(3,13)
15|Deopt()
16|Begin()
18|Begin()
19|If(14)
20|ArrayLength(2)
21|<(20,3)
22|Deopt()
23|Begin()
25|Begin()
26|If(21)
27|<(4,13)
28|Deopt()
29|Begin()
31|Begin()
32|If(27)
33|+(3,4)
34|ArrayLength(2)
35|<(34,33)
36|Deopt()
37|Begin()
39|Begin()
40|If(35)
41|<(33,13)
43|Begin()
44|Deopt()
45|Begin()
46|If(41)
47|==(4,13)
49|Begin()
50|Deopt()
51|Begin()
52|If(47)
53|MethodCallTarget(1,2,3,4)
54|Invoke#implWrite(55,53)
55|FrameState@63(6,6)
57|MonitorExit(58,6)
58|FrameState@66(6)
61|Return()
----- AFTER_PARSING method calls 
  invoke: 10|Invoke#ensureOpen
    trgt: HotSpotMethod<StreamEncoder.ensureOpen>
    args: [1|Local(0)]
    info: exact sun.nio.cs.StreamEncoder.ensureOpen():void
  invoke: 54|Invoke#implWrite
    trgt: HotSpotMethod<StreamEncoder.implWrite>
    args: [1|Local(0), 2|Local(1), 3|Local(2), 4|Local(3)]
    info: assumption sun.nio.cs.StreamEncoder.implWrite(char[], int, int):void
===== AFTER_PARSING
0|StartNode(2)
1|Local(0)()
2|FrameState@0(1)
3|LoadField#isOpen(1)
4|Const(0)()
5|==(3,4)
7|Begin()
8|Deopt()
9|Begin()
10|If(5)
12|Return()
----- AFTER_PARSING method calls 
===== AFTER_PARSING
0|StartNode(3)
1|Local(0)()
2|Local(1)()
3|FrameState@0(1,2)
4|Const(0)()
5|MethodCallTarget(1,2,4)
6|Invoke#indexOf(7,5)
7|FrameState@6(6)
10|Return(6)
----- AFTER_PARSING method calls 
  invoke: 6|Invoke#indexOf
    trgt: HotSpotMethod<String.indexOf>
    args: [1|Local(0), 2|Local(1), 4|Const(0)]
    info: exact java.lang.String.indexOf(int, int):int
===== AFTER_PARSING
0|StartNode(2)
1|Local(0)()
2|FrameState@0(1)
3|MonitorEnter(4,1)
4|FrameState@4(1,1,1)
5|MethodCallTarget(1)
6|Invoke#ensureOpen(7,5)
7|FrameState@8(1,1,1)
9|LoadField#textOut(1)
11|MethodCallTarget(9)
12|Invoke#newLine(13,11)
13|FrameState@15(1,1,1)
15|LoadField#textOut(1)
17|MethodCallTarget(15)
18|Invoke#flushBuffer(19,17)
19|FrameState@22(1,1,1)
21|LoadField#charOut(1)
23|MethodCallTarget(21)
24|Invoke#flushBuffer(25,23)
25|FrameState@29(1,1,1)
27|LoadField#autoFlush(1)
29|Const(0)()
30|==(27,29)
32|Begin()
34|Begin()
35|If(30)
36|LoadField#out(1)
38|MethodCallTarget(36)
39|Invoke#flush(40,38)
40|FrameState@43(1,1,1)
41|EndNode()
42|Merge(44,41,43)
43|EndNode()
44|FrameState@43(1,1)
45|MonitorExit(46,1)
46|FrameState@45(1)
50|Return()
----- AFTER_PARSING method calls 
  invoke: 6|Invoke#ensureOpen
    trgt: HotSpotMethod<PrintStream.ensureOpen>
    args: [1|Local(0)]
    info: exact java.io.PrintStream.ensureOpen():void
  invoke: 12|Invoke#newLine
    trgt: HotSpotMethod<BufferedWriter.newLine>
    args: [9|LoadField#textOut]
    info: assumption java.io.BufferedWriter.newLine():void
  invoke: 18|Invoke#flushBuffer
    trgt: HotSpotMethod<BufferedWriter.flushBuffer>
    args: [15|LoadField#textOut]
    info: assumption java.io.BufferedWriter.flushBuffer():void
  invoke: 24|Invoke#flushBuffer
    trgt: HotSpotMethod<OutputStreamWriter.flushBuffer>
    args: [21|LoadField#charOut]
    info: assumption java.io.OutputStreamWriter.flushBuffer():void
  invoke: 39|Invoke#flush
    trgt: HotSpotMethod<OutputStream.flush>
    args: [36|LoadField#out]
    info: type-checked with type Ljava/io/BufferedOutputStream; and method java.io.BufferedOutputStream.flush():void
===== AFTER_PARSING
0|StartNode(2)
1|Local(0)()
2|FrameState@0(1)
3|LoadField#lineSeparator(1)
4|MethodCallTarget(1,3)
5|Invoke#write(6,4)
6|FrameState@8()
9|Return()
----- AFTER_PARSING method calls 
  invoke: 5|Invoke#write
    trgt: HotSpotMethod<Writer.write>
    args: [1|Local(0), 3|LoadField#lineSeparator]
    info: assumption java.io.Writer.write(String):void
===== HIGH_LEVEL
0|StartNode(3)
1|Local(0)()
2|Local(1)()
3|FrameState@0(1,2)
5|Const(String:"Arg = Sym(0)")()
10|Const(1)()
11|Return(10)
17|FrameState@0(2)
25|FrameState@4(17)
32|CheckCast(80)
34|FrameState@1(25,5)
45|FrameState@4(34)
48|Const(DynamicVariable.$anon$1@1508949147)()
60|Begin()
61|Begin()
62|If(84)
66|EndNode()
67|Merge(73,66,68)
68|EndNode()
69|Begin()
70|Begin()
71|If(85)
72|LoadField#value(127)
73|FrameState@29(87,48)
74|MethodCallTarget(48)
75|Invoke#setInitialValue(76,74)
76|FrameState@33(87,75)
77|EndNode()
78|Merge(81,77,79)
79|EndNode()
80|Phi(72 75)(78,72,75)
81|FrameState@28(87,80)
84|IsNull(90)
85|IsNull(127)
87|FrameState@4(45)
89|CurrentThread()
90|LoadField#inheritableThreadLocals(89)
96|FrameState@16(87,48)
100|LoadField#table(90)
101|ArrayLength(100)
103|-(101,10)
105|LoadField#table(90)
106|LoadIndexed(105,136)
107|Begin()
108|Begin()
109|If(130)
113|==(137,48)
114|EndNode()
115|Merge(120,114,116)
116|EndNode()
117|Begin()
118|Begin()
119|If(113)
120|FrameState@34(132,90,48,136,106)
121|MethodCallTarget(90,48,136,106)
122|Invoke#getEntryAfterMiss(123,121)
123|FrameState@41(132,122)
124|EndNode()
125|Merge(128,124,126)
126|EndNode()
127|Phi(106 122)(125,106,122)
128|FrameState@33(132,127)
130|IsNull(106)
131|!FixedGuard(84)
132|FrameState@2(96)
135|Const(1344678269)()
136|&(103,135)
137|LoadField#referent(106)
139|!FixedGuard(130)
143|MonitorEnter(144,32)
144|FrameState@9(156,32,5,32,32)
151|MonitorExit(152,32)
152|FrameState@20(156,32)
154|IsNull(32)
155|!FixedGuard(154)
156|FrameState@5(25)
183|!FixedGuard(154)
184|FrameState@11(156,32,32,32)
186|MonitorEnter(187,32)
187|FrameState@4(226,32,5,32,32)
191|LoadField#textOut(32)
195|LoadField#textOut(32)
199|LoadField#charOut(32)
201|Invoke#flushBuffer(202,368)
202|FrameState@30(226,32,5,32,32)
203|LoadField#autoFlush(32)
204|Const(0)()
205|==(203,204)
206|Begin()
207|Begin()
208|If(205)
209|Const(10)()
213|<(371,204)
214|EndNode()
215|Merge(221,214,216)
216|EndNode()
217|Begin()
218|Deopt()
219|Begin()
220|If(213)
221|FrameState@53(226,32,32)
222|MonitorExit(223,32)
223|FrameState@55(226,32)
225|!FixedGuard(154)
226|FrameState@9(184)
227|LoadField#out(32)
228|Begin()
229|Deopt()
230|Begin()
231|If(233)
233|IsNull(227)
234|!FixedGuard(154)
240|Invoke#write(241,251)
241|FrameState@10(245)
243|IsNull(191)
244|!FixedGuard(243)
245|FrameState@13(226,32,5,32,32)
250|Const(12)()
251|MethodCallTarget(191,5,204,250)
252|LoadField#lock(195)
253|MonitorEnter(254,252)
254|FrameState@7(283,195,252,252)
258|LoadField#nextChar(195)
260|==(258,204)
261|Begin()
262|Begin()
263|If(260)
264|MonitorExit(265,252)
265|FrameState@20(283,252)
266|LoadField#out(195)
267|LoadField#cb(195)
268|LoadField#nextChar(195)
272|StoreField#nextChar(195,204,273)
273|FrameState@42(283,252,252)
274|MonitorExit(275,252)
275|FrameState@44(283,252)
276|EndNode()
277|Merge(279,276,278)
278|EndNode()
279|FrameState@20(283)
281|IsNull(195)
282|!FixedGuard(281)
283|FrameState@20(226,32,5,32,32)
284|LoadField#out(195)
285|Begin()
286|Deopt()
287|Begin()
288|If(290)
290|IsNull(284)
291|!FixedGuard(281)
292|IsNull(266)
293|!FixedGuard(292)
294|Const(140127980861952)()
295|LoadHub(266)
296|==(295,294)
297|FixedGuard(296)
298|ValueAnchor()
299|Pi(266,298)
300|LoadField#se(299)
305|FrameState@34(283,195,252,252)
306|LoadField#lock(300)
307|MonitorEnter(308,306)
308|FrameState@8(354,300,267,204,268,306,306)
318|ArrayLength(267)
324|<(268,204)
325|Deopt()
326|Begin()
327|Begin()
328|If(324)
330|ArrayLength(267)
331|<(330,268)
332|Deopt()
333|Begin()
334|Begin()
335|If(331)
341|==(268,204)
342|Begin()
343|Deopt()
344|Begin()
345|If(341)
347|Invoke#implWrite(348,367)
348|FrameState@63(354,306,306)
349|MonitorExit(350,306)
350|FrameState@66(354,306)
352|IsNull(300)
353|!FixedGuard(352)
354|FrameState@7(305)
358|LoadField#isOpen(300)
360|==(358,204)
361|Begin()
362|Deopt()
363|Begin()
364|If(360)
366|!FixedGuard(352)
367|MethodCallTarget(300,267,204,268)
368|MethodCallTarget(199)
370|MethodCallTarget(5,209,204)
371|Invoke#indexOf(372,370)
372|FrameState@6(374,371)
374|FrameState@40(226,32,32,32)
375|MonitorEnter(376,32)
376|FrameState@4(410,32,32,32)
380|LoadField#textOut(32)
384|LoadField#textOut(32)
388|LoadField#charOut(32)
390|Invoke#flushBuffer(391,558)
391|FrameState@29(410,32,32,32)
392|LoadField#autoFlush(32)
394|==(392,204)
395|Begin()
396|Begin()
397|If(394)
398|LoadField#out(32)
400|Invoke#flush(401,567)
401|FrameState@43(410,32,32,32)
402|EndNode()
403|Merge(405,402,404)
404|EndNode()
405|FrameState@43(410,32,32)
406|MonitorExit(407,32)
407|FrameState@45(410,32)
409|!FixedGuard(154)
410|FrameState@15(156,32,32)
411|LoadField#out(32)
412|Begin()
413|Deopt()
414|Begin()
415|If(417)
417|IsNull(411)
418|!FixedGuard(154)
419|LoadField#lineSeparator(380)
424|IsNull(380)
425|!FixedGuard(424)
426|FrameState@12(410,32,32,32)
432|Invoke#write(433,442)
433|FrameState@10(436)
435|!FixedGuard(424)
436|FrameState@5(426)
437|LoadField#value(419)
438|ArrayLength(437)
440|IsNull(419)
441|!FixedGuard(440)
442|MethodCallTarget(380,419,204,438)
443|LoadField#lock(384)
444|MonitorEnter(445,443)
445|FrameState@7(474,384,443,443)
449|LoadField#nextChar(384)
451|==(449,204)
452|Begin()
453|Begin()
454|If(451)
455|MonitorExit(456,443)
456|FrameState@20(474,443)
457|LoadField#out(384)
458|LoadField#cb(384)
459|LoadField#nextChar(384)
463|StoreField#nextChar(384,204,464)
464|FrameState@42(474,443,443)
465|MonitorExit(466,443)
466|FrameState@44(474,443)
467|EndNode()
468|Merge(470,467,469)
469|EndNode()
470|FrameState@20(474)
472|IsNull(384)
473|!FixedGuard(472)
474|FrameState@19(410,32,32,32)
475|LoadField#out(384)
476|Begin()
477|Deopt()
478|Begin()
479|If(481)
481|IsNull(475)
482|!FixedGuard(472)
483|IsNull(457)
484|!FixedGuard(483)
485|LoadHub(457)
486|==(485,294)
487|FixedGuard(486)
488|ValueAnchor()
489|Pi(457,488)
490|LoadField#se(489)
495|FrameState@34(474,384,443,443)
496|LoadField#lock(490)
497|MonitorEnter(498,496)
498|FrameState@8(544,490,458,204,459,496,496)
508|ArrayLength(458)
514|<(459,204)
515|Deopt()
516|Begin()
517|Begin()
518|If(514)
520|ArrayLength(458)
521|<(520,459)
522|Deopt()
523|Begin()
524|Begin()
525|If(521)
531|==(459,204)
532|Begin()
533|Deopt()
534|Begin()
535|If(531)
537|Invoke#implWrite(538,557)
538|FrameState@63(544,496,496)
539|MonitorExit(540,496)
540|FrameState@66(544,496)
542|IsNull(490)
543|!FixedGuard(542)
544|FrameState@7(495)
548|LoadField#isOpen(490)
550|==(548,204)
551|Begin()
552|Deopt()
553|Begin()
554|If(550)
556|!FixedGuard(542)
557|MethodCallTarget(490,458,204,459)
558|MethodCallTarget(388)
559|IsNull(398)
560|!FixedGuard(559)
561|Const(140127980860544)()
562|LoadHub(398)
563|==(562,561)
564|FixedGuard(563)
565|ValueAnchor()
566|Pi(398,565)
567|MethodCallTarget(566)
568|LogicConstant()
570|LogicConstant()
----- HIGH_LEVEL method calls 
  invoke: 75|Invoke#setInitialValue
    trgt: HotSpotMethod<ThreadLocal.setInitialValue>
    args: [48|Const(DynamicVariable.$anon$1@1508949147)]
    info: exact java.lang.ThreadLocal.setInitialValue():Object
  invoke: 122|Invoke#getEntryAfterMiss
    trgt: HotSpotMethod<ThreadLocal$ThreadLocalMap.getEntryAfterMiss>
    args: [90|LoadField#inheritableThreadLocals, 48|Const(DynamicVariable.$anon$1@1508949147), 136|&, 106|LoadIndexed]
    info: exact java.lang.ThreadLocal$ThreadLocalMap.getEntryAfterMiss(ThreadLocal, int, ThreadLocal$ThreadLocalMap$Entry):ThreadLocal$ThreadLocalMap$Entry
  invoke: 201|Invoke#flushBuffer
    trgt: HotSpotMethod<OutputStreamWriter.flushBuffer>
    args: [199|LoadField#charOut]
    info: exact java.io.OutputStreamWriter.flushBuffer():void
  invoke: 240|Invoke#write
    trgt: HotSpotMethod<BufferedWriter.write>
    args: [191|LoadField#textOut, 5|Const(String:"Arg = Sym(0)"), 204|Const(0), 250|Const(12)]
    info: exact java.io.BufferedWriter.write(String, int, int):void
  invoke: 347|Invoke#implWrite
    trgt: HotSpotMethod<StreamEncoder.implWrite>
    args: [300|LoadField#se, 267|LoadField#cb, 204|Const(0), 268|LoadField#nextChar]
    info: exact sun.nio.cs.StreamEncoder.implWrite(char[], int, int):void
  invoke: 371|Invoke#indexOf
    trgt: HotSpotMethod<String.indexOf>
    args: [5|Const(String:"Arg = Sym(0)"), 209|Const(10), 204|Const(0)]
    info: exact java.lang.String.indexOf(int, int):int
  invoke: 390|Invoke#flushBuffer
    trgt: HotSpotMethod<OutputStreamWriter.flushBuffer>
    args: [388|LoadField#charOut]
    info: exact java.io.OutputStreamWriter.flushBuffer():void
  invoke: 400|Invoke#flush
    trgt: HotSpotMethod<BufferedOutputStream.flush>
    args: [566|Pi]
    info: exact java.io.BufferedOutputStream.flush():void
  invoke: 432|Invoke#write
    trgt: HotSpotMethod<BufferedWriter.write>
    args: [380|LoadField#textOut, 419|LoadField#lineSeparator, 204|Const(0), 438|ArrayLength]
    info: exact java.io.BufferedWriter.write(String, int, int):void
  invoke: 537|Invoke#implWrite
    trgt: HotSpotMethod<StreamEncoder.implWrite>
    args: [490|LoadField#se, 458|LoadField#cb, 204|Const(0), 459|LoadField#nextChar]
    info: exact sun.nio.cs.StreamEncoder.implWrite(char[], int, int):void
===== MID_LEVEL
0|StartNode(3)
1|Local(0)()
2|Local(1)()
3|FrameState@0(1,2)
5|Const(String:"Arg = Sym(0)")()
10|Const(1)()
11|Return(10)
17|FrameState@0(2)
25|FrameState@4(17)
34|FrameState@1(25,5)
45|FrameState@4(34)
48|Const(DynamicVariable.$anon$1@1508949147)()
60|Begin()
61|Begin()
62|If(84)
66|EndNode()
67|Merge(73,66,68)
68|EndNode()
69|Begin()
70|Begin()
71|If(85)
73|FrameState@29(87,48)
75|Invoke#Direct#setInitialValue(76,595)
76|FrameState@33(87,75)
77|EndNode()
78|Merge(81,77,79)
79|EndNode()
80|Phi(1661 75)(78,1661,75)
81|FrameState@28(87,80)
84|IsNull(1644)
85|IsNull(127)
87|FrameState@4(45)
89|CurrentThread()
96|FrameState@16(87,48)
103|-(1650,10)
107|Begin()
108|Begin()
109|If(130)
113|==(1654,48)
114|EndNode()
115|Merge(120,114,116)
116|EndNode()
117|Begin()
118|Begin()
119|If(113)
120|FrameState@34(132,1644,48,136,1652)
122|Invoke#Direct#getEntryAfterMiss(123,591,61)
123|FrameState@41(132,122)
124|EndNode()
125|Merge(128,124,126)
126|EndNode()
127|Phi(1652 122)(125,1652,122)
128|FrameState@33(132,127)
130|IsNull(1652)
132|FrameState@2(96)
135|Const(1344678269)()
136|&(103,135)
144|FrameState@9(156,80,5,80,80)
152|FrameState@20(156,80)
154|IsNull(80)
156|FrameState@5(25)
184|FrameState@11(156,80,80,80)
187|FrameState@4(226,80,5,80,80)
201|Invoke#Direct#flushBuffer(202,1088,1087)
202|FrameState@30(226,80,5,80,80)
204|Const(0)()
205|==(1861,204)
206|Begin()
207|Begin()
208|If(205)
209|Const(10)()
213|<(371,204)
214|EndNode()
215|Merge(221,214,216)
216|EndNode()
217|Begin()
218|Deopt()
219|Begin()
220|If(213)
221|FrameState@53(226,80,80)
223|FrameState@55(226,80)
226|FrameState@9(184)
228|Begin()
229|Deopt()
230|Begin()
231|If(233)
233|IsNull(1708)
240|Invoke#Direct#write(241,787,785)
241|FrameState@10(245)
243|IsNull(1710)
245|FrameState@13(226,80,5,80,80)
250|Const(12)()
254|FrameState@7(283,1712,1714,1714)
261|Begin()
262|Begin()
263|If(341)
265|FrameState@20(283,1714)
273|FrameState@42(283,1714,1714)
275|FrameState@44(283,1714)
276|EndNode()
277|Merge(279,276,278,1587,1589)
278|EndNode()
279|FrameState@20(283)
281|IsNull(1712)
283|FrameState@20(226,80,5,80,80)
285|Begin()
286|Deopt()
287|Begin()
288|If(292)
292|IsNull(1738)
294|Const(140127980861952)()
296|==(1746,294)
299|Pi(1738,1742)
305|FrameState@34(283,1712,1714,1714)
308|FrameState@8(354,1748,1743,204,1740,1749,1749)
324|<(1740,204)
325|Deopt()
326|Begin()
327|Begin()
328|If(324)
331|<(1796,1740)
332|Deopt()
333|Begin()
334|Begin()
335|If(331)
341|==(1740,204)
347|Invoke#Direct#implWrite(348,1018,926)
348|FrameState@63(354,1749,1749)
350|FrameState@66(354,1749)
352|IsNull(1748)
354|FrameState@7(305)
360|==(1794,204)
361|Begin()
362|Deopt()
363|Begin()
364|If(360)
371|Invoke#Direct#indexOf(372,1091)
372|FrameState@6(374,371)
374|FrameState@40(226,80,80,80)
376|FrameState@4(410,80,80,80)
390|Invoke#Direct#flushBuffer(391,1513,1512)
391|FrameState@29(410,80,80,80)
394|==(2159,204)
395|Begin()
396|Begin()
397|If(394)
400|Invoke#Direct#flush(401,1521)
401|FrameState@43(410,80,80,80)
402|EndNode()
403|Merge(405,402,404)
404|EndNode()
405|FrameState@43(410,80,80)
407|FrameState@45(410,80)
410|FrameState@15(156,80,80)
412|Begin()
413|Deopt()
414|Begin()
415|If(417)
417|IsNull(1949)
424|IsNull(1951)
426|FrameState@12(410,80,80,80)
432|Invoke#Direct#write(433,1220,1210)
433|FrameState@10(436)
436|FrameState@5(426)
440|IsNull(1953)
445|FrameState@7(474,1959,1961,1961)
452|Begin()
453|Begin()
454|If(531)
456|FrameState@20(474,1961)
464|FrameState@42(474,1961,1961)
466|FrameState@44(474,1961)
467|EndNode()
468|Merge(470,467,469,1590,1592)
469|EndNode()
470|FrameState@20(474)
472|IsNull(1959)
474|FrameState@19(410,80,80,80)
476|Begin()
477|Deopt()
478|Begin()
479|If(483)
483|IsNull(2003)
486|==(2011,294)
489|Pi(2003,2007)
495|FrameState@34(474,1959,1961,1961)
498|FrameState@8(544,2013,2008,204,2005,2014,2014)
514|<(2005,204)
515|Deopt()
516|Begin()
517|Begin()
518|If(514)
521|<(2078,2005)
522|Deopt()
523|Begin()
524|Begin()
525|If(521)
531|==(2005,204)
537|Invoke#Direct#implWrite(538,1444,1353)
538|FrameState@63(544,2014,2014)
540|FrameState@66(544,2014)
542|IsNull(2013)
544|FrameState@7(495)
550|==(2076,204)
551|Begin()
552|Deopt()
553|Begin()
554|If(550)
559|IsNull(2161)
561|Const(140127980860544)()
563|==(2163,561)
566|Pi(2161,2162)
571|Location()
576|ValueAnchor(61,1642,1642,584)
577|Location()
579|Location()
583||<|(136,1650)
584|Guard(583,61)
585|IndexedLocation(136)
589|Location()
591|HotSpotDirectCallTarget(1644,48,136,1652)
592|Location()
595|HotSpotDirectCallTarget(48)
596|Const(140127980859568)()
600|Begin()
601|Begin()
602|If(608)
607|Deopt()
608|==(1674,596)
612|ValueAnchor(782)
616|Merge(617,642)
617|EndNode()
618|Begin()
619|Begin()
620|If(662)
621|Begin()
622|Begin()
623|If(682)
624|Begin()
625|Begin()
626|If(683)
627|Begin()
628|Begin()
629|If(685)
630|Begin()
631|Begin()
632|If(667)
633|EndNode()
634|Merge(633,635,636,640,641,649,650,677)
635|EndNode()
636|EndNode()
637|Begin()
638|Begin()
639|If(669)
640|EndNode()
641|EndNode()
642|EndNode()
643|Begin()
644|Begin()
645|If(672)
646|Begin()
647|Begin()
648|If(690)
649|EndNode()
650|EndNode()
653|BeginLockScope(144)
654|DirectCompareAndSwap(80,674,665,666)
655|MonitorEnterStubCall(80,653)
656|DirectCompareAndSwap(80,674,1676,668)
657|MonitorEnterStubCall(80,653)
658|DirectCompareAndSwap(80,674,1676,1679)
659|DirectCompareAndSwap(80,674,670,653)
660|MonitorEnterStubCall(80,653)
661|&(1676,678)
662|==(661,679)
664|^(668,1676)
665|&(1676,686)
666||(665,693)
667|==(654,665)
668||(1679,693)
669|==(656,1676)
670||(1676,687)
671|Write(653,688,670,144)
672|==(659,670)
673|-(659,694)
674|Const(0)()
675|Write(653,688,674,144)
677|EndNode()
678|Const(7)()
679|Const(5)()
680|Location()
681|Const(-121)()
682|IntegerTest(664,681)
683|IntegerTest(664,678)
684|Const(768)()
685|IntegerTest(664,684)
686|Const(895)()
687|Const(1)()
688|Location()
689|Const(-4089)()
690|IntegerTest(673,689)
693|Register%r15()
694|Register%rsp()
695|ValueAnchor(782)
700|Merge(701,726)
701|EndNode()
702|Begin()
703|Begin()
704|If(746)
705|Begin()
706|Begin()
707|If(766)
708|Begin()
709|Begin()
710|If(767)
711|Begin()
712|Begin()
713|If(769)
714|Begin()
715|Begin()
716|If(751)
717|EndNode()
718|Merge(717,719,720,724,725,733,734,761)
719|EndNode()
720|EndNode()
721|Begin()
722|Begin()
723|If(753)
724|EndNode()
725|EndNode()
726|EndNode()
727|Begin()
728|Begin()
729|If(756)
730|Begin()
731|Begin()
732|If(774)
733|EndNode()
734|EndNode()
737|BeginLockScope(187)
738|DirectCompareAndSwap(80,674,749,750)
739|MonitorEnterStubCall(80,737)
740|DirectCompareAndSwap(80,674,1692,752)
741|MonitorEnterStubCall(80,737)
742|DirectCompareAndSwap(80,674,1692,1695)
743|DirectCompareAndSwap(80,674,754,737)
744|MonitorEnterStubCall(80,737)
745|&(1692,678)
746|==(745,679)
748|^(752,1692)
749|&(1692,686)
750||(749,777)
751|==(738,749)
752||(1695,777)
753|==(740,1692)
754||(1692,687)
755|Write(737,688,754,187)
756|==(743,754)
757|-(743,778)
759|Write(737,688,674,187)
761|EndNode()
766|IntegerTest(748,681)
767|IntegerTest(748,678)
769|IntegerTest(748,684)
774|IntegerTest(757,689)
777|Register%r15()
778|Register%rsp()
779|ValueAnchor(782)
780|Location()
782|!Guard(154,78)
783|Location()
785|!Guard(243,228)
787|HotSpotDirectCallTarget(1710,5,204,250)
789|!Guard(281,228)
791|Location()
793|Begin()
794|Begin()
795|If(856)
796|Merge(797,822)
797|EndNode()
798|Begin()
799|Begin()
800|If(842)
801|Begin()
802|Begin()
803|If(862)
804|Begin()
805|Begin()
806|If(863)
807|Begin()
808|Begin()
809|If(865)
810|Begin()
811|Begin()
812|If(847)
813|EndNode()
814|Merge(813,815,816,820,821,829,830,857)
815|EndNode()
816|EndNode()
817|Begin()
818|Begin()
819|If(849)
820|EndNode()
821|EndNode()
822|EndNode()
823|Begin()
824|Begin()
825|If(852)
826|Begin()
827|Begin()
828|If(870)
829|EndNode()
830|EndNode()
832|Deopt()
833|BeginLockScope(254)
834|DirectCompareAndSwap(1714,674,845,846)
835|MonitorEnterStubCall(1714,833)
836|DirectCompareAndSwap(1714,674,1716,848)
837|MonitorEnterStubCall(1714,833)
838|DirectCompareAndSwap(1714,674,1716,1719)
839|DirectCompareAndSwap(1714,674,850,833)
840|MonitorEnterStubCall(1714,833)
841|&(1716,678)
842|==(841,679)
844|^(848,1716)
845|&(1716,686)
846||(845,873)
847|==(834,845)
848||(1719,873)
849|==(836,1716)
850||(1716,687)
851|Write(833,688,850,254)
852|==(839,850)
853|-(839,874)
855|Write(833,688,674,254)
856|IsNull(1714)
857|EndNode()
862|IntegerTest(844,681)
863|IntegerTest(844,678)
865|IntegerTest(844,684)
870|IntegerTest(853,689)
873|Register%r15()
874|Register%rsp()
875|ValueAnchor(789)
876|Location()
878|Location()
880|Begin()
881|Begin()
882|If(903)
883|Begin()
884|Begin()
885|If(905)
886|Begin()
887|Begin()
888|If(906)
889|EndNode()
890|Merge(889,891,892)
891|EndNode()
892|EndNode()
897|EndLockScope(265)
898|CurrentLock()
899|DirectCompareAndSwap(1714,674,898,1756)
900|MonitorExitStubCall(1714)
901|EndLockScope(265)
902|&(1755,678)
903|==(902,679)
905|==(1756,674)
906|==(899,898)
913|Location()
918|Location()
920|Guard(296,261)
922|Location()
926|!Guard(352,261)
927|ValueAnchor(926)
929|Begin()
930|Begin()
931|If(992)
932|Merge(933,958)
933|EndNode()
934|Begin()
935|Begin()
936|If(978)
937|Begin()
938|Begin()
939|If(998)
940|Begin()
941|Begin()
942|If(999)
943|Begin()
944|Begin()
945|If(1001)
946|Begin()
947|Begin()
948|If(983)
949|EndNode()
950|Merge(949,951,952,956,957,965,966,993)
951|EndNode()
952|EndNode()
953|Begin()
954|Begin()
955|If(985)
956|EndNode()
957|EndNode()
958|EndNode()
959|Begin()
960|Begin()
961|If(988)
962|Begin()
963|Begin()
964|If(1006)
965|EndNode()
966|EndNode()
968|Deopt()
969|BeginLockScope(308)
970|DirectCompareAndSwap(1749,674,981,982)
971|MonitorEnterStubCall(1749,969)
972|DirectCompareAndSwap(1749,674,1751,984)
973|MonitorEnterStubCall(1749,969)
974|DirectCompareAndSwap(1749,674,1751,1754)
975|DirectCompareAndSwap(1749,674,986,969)
976|MonitorEnterStubCall(1749,969)
977|&(1751,678)
978|==(977,679)
980|^(984,1751)
981|&(1751,686)
982||(981,1009)
983|==(970,981)
984||(1754,1009)
985|==(972,1751)
986||(1751,687)
987|Write(969,688,986,308)
988|==(975,986)
989|-(975,1010)
991|Write(969,688,674,308)
992|IsNull(1749)
993|EndNode()
998|IntegerTest(980,681)
999|IntegerTest(980,678)
1001|IntegerTest(980,684)
1006|IntegerTest(989,689)
1009|Register%r15()
1010|Register%rsp()
1011|ValueAnchor(926)
1012|Location()
1014|Membar()
1015|Membar()
1018|HotSpotDirectCallTarget(1748,1743,204,1740)
1019|Begin()
1020|Begin()
1021|If(1042)
1022|Begin()
1023|Begin()
1024|If(1044)
1025|Begin()
1026|Begin()
1027|If(1045)
1028|EndNode()
1029|Merge(1028,1030,1031)
1030|EndNode()
1031|EndNode()
1032|EndNode()
1033|Merge(1032,1034)
1034|EndNode()
1036|EndLockScope(350)
1037|CurrentLock()
1038|DirectCompareAndSwap(1749,674,1037,1800)
1039|MonitorExitStubCall(1749)
1040|EndLockScope(350)
1041|&(1799,678)
1042|==(1041,679)
1044|==(1800,674)
1045|==(1038,1037)
1051|Write(1712,878,204,273,789)
1052|Begin()
1053|Begin()
1054|If(1075)
1055|Begin()
1056|Begin()
1057|If(1077)
1058|Begin()
1059|Begin()
1060|If(1078)
1061|EndNode()
1062|Merge(1061,1063,1064)
1063|EndNode()
1064|EndNode()
1069|EndLockScope(275)
1070|CurrentLock()
1071|DirectCompareAndSwap(1714,674,1070,1830)
1072|MonitorExitStubCall(1714)
1073|EndLockScope(275)
1074|&(1829,678)
1075|==(1074,679)
1077|==(1830,674)
1078|==(1071,1070)
1084|Location()
1086|IsNull(1859)
1087|!Guard(1086,277)
1088|HotSpotDirectCallTarget(1859)
1089|Location()
1091|HotSpotDirectCallTarget(5,209,204)
1092|Begin()
1093|Begin()
1094|If(1115)
1095|Begin()
1096|Begin()
1097|If(1117)
1098|Begin()
1099|Begin()
1100|If(1118)
1101|EndNode()
1102|Merge(1101,1103,1104)
1103|EndNode()
1104|EndNode()
1105|EndNode()
1106|Merge(1105,1107)
1107|EndNode()
1109|EndLockScope(223)
1110|CurrentLock()
1111|DirectCompareAndSwap(80,674,1110,1880)
1112|MonitorExitStubCall(80)
1113|EndLockScope(223)
1114|&(1879,678)
1115|==(1114,679)
1117|==(1880,674)
1118|==(1111,1110)
1124|ValueAnchor(782)
1128|Merge(1129,1154)
1129|EndNode()
1130|Begin()
1131|Begin()
1132|If(1174)
1133|Begin()
1134|Begin()
1135|If(1194)
1136|Begin()
1137|Begin()
1138|If(1195)
1139|Begin()
1140|Begin()
1141|If(1197)
1142|Begin()
1143|Begin()
1144|If(1179)
1145|EndNode()
1146|Merge(1145,1147,1148,1152,1153,1161,1162,1189)
1147|EndNode()
1148|EndNode()
1149|Begin()
1150|Begin()
1151|If(1181)
1152|EndNode()
1153|EndNode()
1154|EndNode()
1155|Begin()
1156|Begin()
1157|If(1184)
1158|Begin()
1159|Begin()
1160|If(1202)
1161|EndNode()
1162|EndNode()
1165|BeginLockScope(376)
1166|DirectCompareAndSwap(80,674,1177,1178)
1167|MonitorEnterStubCall(80,1165)
1168|DirectCompareAndSwap(80,674,1913,1180)
1169|MonitorEnterStubCall(80,1165)
1170|DirectCompareAndSwap(80,674,1913,1916)
1171|DirectCompareAndSwap(80,674,1182,1165)
1172|MonitorEnterStubCall(80,1165)
1173|&(1913,678)
1174|==(1173,679)
1176|^(1180,1913)
1177|&(1913,686)
1178||(1177,1205)
1179|==(1166,1177)
1180||(1916,1205)
1181|==(1168,1913)
1182||(1913,687)
1183|Write(1165,688,1182,376)
1184|==(1171,1182)
1185|-(1171,1206)
1187|Write(1165,688,674,376)
1189|EndNode()
1194|IntegerTest(1176,681)
1195|IntegerTest(1176,678)
1197|IntegerTest(1176,684)
1202|IntegerTest(1185,689)
1205|Register%r15()
1206|Register%rsp()
1207|ValueAnchor(782)
1210|!Guard(424,412)
1212|Location()
1215|!Guard(440,412)
1217|Location()
1220|HotSpotDirectCallTarget(1951,1953,204,1957)
1222|!Guard(472,412)
1225|Begin()
1226|Begin()
1227|If(1288)
1228|Merge(1229,1254)
1229|EndNode()
1230|Begin()
1231|Begin()
1232|If(1274)
1233|Begin()
1234|Begin()
1235|If(1294)
1236|Begin()
1237|Begin()
1238|If(1295)
1239|Begin()
1240|Begin()
1241|If(1297)
1242|Begin()
1243|Begin()
1244|If(1279)
1245|EndNode()
1246|Merge(1245,1247,1248,1252,1253,1261,1262,1289)
1247|EndNode()
1248|EndNode()
1249|Begin()
1250|Begin()
1251|If(1281)
1252|EndNode()
1253|EndNode()
1254|EndNode()
1255|Begin()
1256|Begin()
1257|If(1284)
1258|Begin()
1259|Begin()
1260|If(1302)
1261|EndNode()
1262|EndNode()
1264|Deopt()
1265|BeginLockScope(445)
1266|DirectCompareAndSwap(1961,674,1277,1278)
1267|MonitorEnterStubCall(1961,1265)
1268|DirectCompareAndSwap(1961,674,1963,1280)
1269|MonitorEnterStubCall(1961,1265)
1270|DirectCompareAndSwap(1961,674,1963,1966)
1271|DirectCompareAndSwap(1961,674,1282,1265)
1272|MonitorEnterStubCall(1961,1265)
1273|&(1963,678)
1274|==(1273,679)
1276|^(1280,1963)
1277|&(1963,686)
1278||(1277,1305)
1279|==(1266,1277)
1280||(1966,1305)
1281|==(1268,1963)
1282||(1963,687)
1283|Write(1265,688,1282,445)
1284|==(1271,1282)
1285|-(1271,1306)
1287|Write(1265,688,674,445)
1288|IsNull(1961)
1289|EndNode()
1294|IntegerTest(1276,681)
1295|IntegerTest(1276,678)
1297|IntegerTest(1276,684)
1302|IntegerTest(1285,689)
1305|Register%r15()
1306|Register%rsp()
1307|ValueAnchor(1222)
1310|Begin()
1311|Begin()
1312|If(1333)
1313|Begin()
1314|Begin()
1315|If(1335)
1316|Begin()
1317|Begin()
1318|If(1336)
1319|EndNode()
1320|Merge(1319,1321,1322)
1321|EndNode()
1322|EndNode()
1327|EndLockScope(456)
1328|CurrentLock()
1329|DirectCompareAndSwap(1961,674,1328,2021)
1330|MonitorExitStubCall(1961)
1331|EndLockScope(456)
1332|&(2020,678)
1333|==(1332,679)
1335|==(2021,674)
1336|==(1329,1328)
1348|Guard(486,452)
1353|!Guard(542,452)
1354|ValueAnchor(1353)
1356|Begin()
1357|Begin()
1358|If(1419)
1359|Merge(1360,1385)
1360|EndNode()
1361|Begin()
1362|Begin()
1363|If(1405)
1364|Begin()
1365|Begin()
1366|If(1425)
1367|Begin()
1368|Begin()
1369|If(1426)
1370|Begin()
1371|Begin()
1372|If(1428)
1373|Begin()
1374|Begin()
1375|If(1410)
1376|EndNode()
1377|Merge(1376,1378,1379,1383,1384,1392,1393,1420)
1378|EndNode()
1379|EndNode()
1380|Begin()
1381|Begin()
1382|If(1412)
1383|EndNode()
1384|EndNode()
1385|EndNode()
1386|Begin()
1387|Begin()
1388|If(1415)
1389|Begin()
1390|Begin()
1391|If(1433)
1392|EndNode()
1393|EndNode()
1395|Deopt()
1396|BeginLockScope(498)
1397|DirectCompareAndSwap(2014,674,1408,1409)
1398|MonitorEnterStubCall(2014,1396)
1399|DirectCompareAndSwap(2014,674,2016,1411)
1400|MonitorEnterStubCall(2014,1396)
1401|DirectCompareAndSwap(2014,674,2016,2019)
1402|DirectCompareAndSwap(2014,674,1413,1396)
1403|MonitorEnterStubCall(2014,1396)
1404|&(2016,678)
1405|==(1404,679)
1407|^(1411,2016)
1408|&(2016,686)
1409||(1408,1436)
1410|==(1397,1408)
1411||(2019,1436)
1412|==(1399,2016)
1413||(2016,687)
1414|Write(1396,688,1413,498)
1415|==(1402,1413)
1416|-(1402,1437)
1418|Write(1396,688,674,498)
1419|IsNull(2014)
1420|EndNode()
1425|IntegerTest(1407,681)
1426|IntegerTest(1407,678)
1428|IntegerTest(1407,684)
1433|IntegerTest(1416,689)
1436|Register%r15()
1437|Register%rsp()
1438|ValueAnchor(1353)
1440|Membar()
1441|Membar()
1444|HotSpotDirectCallTarget(2013,2008,204,2005)
1445|Begin()
1446|Begin()
1447|If(1468)
1448|Begin()
1449|Begin()
1450|If(1470)
1451|Begin()
1452|Begin()
1453|If(1471)
1454|EndNode()
1455|Merge(1454,1456,1457)
1456|EndNode()
1457|EndNode()
1458|EndNode()
1459|Merge(1458,1460)
1460|EndNode()
1462|EndLockScope(540)
1463|CurrentLock()
1464|DirectCompareAndSwap(2014,674,1463,2082)
1465|MonitorExitStubCall(2014)
1466|EndLockScope(540)
1467|&(2081,678)
1468|==(1467,679)
1470|==(2082,674)
1471|==(1464,1463)
1477|Write(1959,878,204,464,1222)
1478|Begin()
1479|Begin()
1480|If(1501)
1481|Begin()
1482|Begin()
1483|If(1503)
1484|Begin()
1485|Begin()
1486|If(1504)
1487|EndNode()
1488|Merge(1487,1489,1490)
1489|EndNode()
1490|EndNode()
1495|EndLockScope(466)
1496|CurrentLock()
1497|DirectCompareAndSwap(1961,674,1496,2120)
1498|MonitorExitStubCall(1961)
1499|EndLockScope(466)
1500|&(2119,678)
1501|==(1500,679)
1503|==(2120,674)
1504|==(1497,1496)
1511|IsNull(2157)
1512|!Guard(1511,468)
1513|HotSpotDirectCallTarget(2157)
1516|!Guard(559,396)
1519|Guard(563,396)
1521|HotSpotDirectCallTarget(566)
1522|Begin()
1523|Begin()
1524|If(1545)
1525|Begin()
1526|Begin()
1527|If(1547)
1528|Begin()
1529|Begin()
1530|If(1548)
1531|EndNode()
1532|Merge(1531,1533,1534)
1533|EndNode()
1534|EndNode()
1535|EndNode()
1536|Merge(1535,1537)
1537|EndNode()
1539|EndLockScope(407)
1540|CurrentLock()
1541|DirectCompareAndSwap(80,674,1540,2184)
1542|MonitorExitStubCall(80)
1543|EndLockScope(407)
1544|&(2183,678)
1545|==(1544,679)
1547|==(2184,674)
1548|==(1541,1540)
1554|Begin()
1555|Begin()
1556|If(1577)
1557|Begin()
1558|Begin()
1559|If(1579)
1560|Begin()
1561|Begin()
1562|If(1580)
1563|EndNode()
1564|Merge(1563,1565,1566)
1565|EndNode()
1566|EndNode()
1567|EndNode()
1568|Merge(1567,1569)
1569|EndNode()
1571|EndLockScope(152)
1572|CurrentLock()
1573|DirectCompareAndSwap(80,674,1572,2222)
1574|MonitorExitStubCall(80)
1575|EndLockScope(152)
1576|&(2221,678)
1577|==(1576,679)
1579|==(2222,674)
1580|==(1573,1572)
1587|EndNode()
1589|EndNode()
1590|EndNode()
1592|EndNode()
1613|IsNull(1743)
1614|!Guard(1613,361)
1623|IsNull(1955)
1624|!Guard(1623,412)
1633|IsNull(2008)
1634|!Guard(1633,551)
1641|IsNull(1645)
1642|!Guard(1641,61)
1644|FloatingRead(89,571,0,0)
1645|FloatingRead(1644,577,0,61)
1650|FloatingRead(1645,579,1642)
1652|FloatingRead(1645,585,0,584)
1654|FloatingRead(1652,589,0,108)
1660|MemoryPhi(0 122)(125,0,122)
1661|FloatingRead(127,592,1660,70)
1673|MemoryPhi(1660 75)(78,1660,75)
1674|FloatingRead(80,918,782)
1675|ValueAnchor(782)
1676|FloatingRead(80,688,1673,600)
1678|ValueAnchor(782)
1679|FloatingRead(1674,680,653,619)
1691|MemoryPhi(653 654 654 656 656 659 675 659)(634,653,654,654,656,656,659,675,659)
1692|FloatingRead(80,688,1691,634)
1694|ValueAnchor(782)
1695|FloatingRead(1674,680,737,703)
1707|MemoryPhi(737 738 738 740 740 743 759 743)(718,737,738,738,740,740,743,759,743)
1708|FloatingRead(80,780,1707,782)
1710|FloatingRead(80,783,1707,782)
1711|ValueAnchor(782,785)
1712|FloatingRead(80,783,240,782)
1713|ValueAnchor(782,789)
1714|FloatingRead(1712,791,240,789)
1716|FloatingRead(1714,688,240,793)
1717|FloatingRead(1714,918,793)
1719|FloatingRead(1717,680,833,799)
1737|MemoryPhi(833 834 834 836 836 839 855 839)(814,833,834,834,836,836,839,855,839)
1738|FloatingRead(1712,876,1737,789)
1740|FloatingRead(1712,878,1737,789)
1741|ValueAnchor(789)
1742|ValueAnchor(789,285,920)
1743|FloatingRead(1712,913,1737,789)
1746|FloatingRead(1738,918,285)
1748|FloatingRead(299,922,1737,261)
1749|FloatingRead(1748,791,1737,926)
1751|FloatingRead(1749,688,1737,929)
1752|FloatingRead(1749,918,929)
1754|FloatingRead(1752,680,969,935)
1755|FloatingRead(1714,688,1737,262)
1756|FloatingRead(898,688,1737,880)
1794|FloatingRead(1748,1012,1014,926)
1795|ValueAnchor(926)
1796|FloatingRead(1743,579,1614)
1797|ValueAnchor(1614)
1798|ValueAnchor(1614)
1799|FloatingRead(1749,688,347,334)
1800|FloatingRead(1037,688,347,1019)
1828|MemoryPhi(1036 1040)(1033,1036,1040)
1829|FloatingRead(1714,688,1828,1033)
1830|FloatingRead(1070,688,1828,1052)
1858|MemoryPhi(897 1069 901 1073)(277,897,1069,901,1073)
1859|FloatingRead(80,1084,1858,782)
1860|ValueAnchor(782)
1861|FloatingRead(80,1089,201,782)
1862|ValueAnchor(782)
1878|MemoryPhi(201 371)(215,201,371)
1879|FloatingRead(80,688,1878,215)
1880|FloatingRead(1110,688,1878,1092)
1912|MemoryPhi(1109 1113)(1106,1109,1113)
1913|FloatingRead(80,688,1912,1106)
1915|ValueAnchor(782)
1916|FloatingRead(1674,680,1165,1131)
1948|MemoryPhi(1165 1166 1166 1168 1168 1171 1187 1171)(1146,1165,1166,1166,1168,1168,1171,1187,1171)
1949|FloatingRead(80,780,1948,782)
1951|FloatingRead(80,783,1948,782)
1952|ValueAnchor(782,1210,1215,1624)
1953|FloatingRead(1951,1212,1948,1210)
1955|FloatingRead(1953,1217,1948,1215)
1957|FloatingRead(1955,579,1624)
1959|FloatingRead(80,783,432,782)
1960|ValueAnchor(782,1222)
1961|FloatingRead(1959,791,432,1222)
1963|FloatingRead(1961,688,432,1225)
1964|FloatingRead(1961,918,1225)
1966|FloatingRead(1964,680,1265,1231)
2002|MemoryPhi(1265 1266 1266 1268 1268 1271 1287 1271)(1246,1265,1266,1266,1268,1268,1271,1287,1271)
2003|FloatingRead(1959,876,2002,1222)
2005|FloatingRead(1959,878,2002,1222)
2006|ValueAnchor(1222)
2007|ValueAnchor(1222,476,1348)
2008|FloatingRead(1959,913,2002,1222)
2011|FloatingRead(2003,918,476)
2013|FloatingRead(489,922,2002,452)
2014|FloatingRead(2013,791,2002,1353)
2016|FloatingRead(2014,688,2002,1356)
2017|FloatingRead(2014,918,1356)
2019|FloatingRead(2017,680,1396,1362)
2020|FloatingRead(1961,688,2002,453)
2021|FloatingRead(1328,688,2002,1310)
2076|FloatingRead(2013,1012,1440,1353)
2077|ValueAnchor(1353)
2078|FloatingRead(2008,579,1634)
2079|ValueAnchor(1634)
2080|ValueAnchor(1634)
2081|FloatingRead(2014,688,537,524)
2082|FloatingRead(1463,688,537,1445)
2118|MemoryPhi(1462 1466)(1459,1462,1466)
2119|FloatingRead(1961,688,2118,1459)
2120|FloatingRead(1496,688,2118,1478)
2156|MemoryPhi(1327 1495 1331 1499)(468,1327,1495,1331,1499)
2157|FloatingRead(80,1084,2156,782)
2158|ValueAnchor(782)
2159|FloatingRead(80,1089,390,782)
2160|ValueAnchor(782)
2161|FloatingRead(80,780,390,782)
2162|ValueAnchor(782,1516,1519)
2163|FloatingRead(2161,918,1516)
2182|MemoryPhi(390 400)(403,390,400)
2183|FloatingRead(80,688,2182,403)
2184|FloatingRead(1540,688,2182,1522)
2220|MemoryPhi(1539 1543)(1536,1539,1543)
2221|FloatingRead(80,688,2220,1536)
2222|FloatingRead(1572,688,2220,1554)
2259|LogicConstant()
2261|LogicConstant()
----- MID_LEVEL method calls 
Invoke Node: 75|Invoke#Direct#setInitialValue
Invoke Node: 122|Invoke#Direct#getEntryAfterMiss
Invoke Node: 201|Invoke#Direct#flushBuffer
Invoke Node: 240|Invoke#Direct#write
Invoke Node: 347|Invoke#Direct#implWrite
Invoke Node: 371|Invoke#Direct#indexOf
Invoke Node: 390|Invoke#Direct#flushBuffer
Invoke Node: 400|Invoke#Direct#flush
Invoke Node: 432|Invoke#Direct#write
Invoke Node: 537|Invoke#Direct#implWrite
===== DONE
Arg = Sym(0)
Arg = Sym(0)
